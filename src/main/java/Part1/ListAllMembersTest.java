package Part1;
import org.junit.*;

import java.util.LinkedList;

public class ListAllMembersTest {

    @Test
    public void listAllMembersSimpleTest() {
        //Given
        LinkedList list = new LinkedList();
        String expected = "class java.util.LinkedList\ntransient int java.util.LinkedList.size\ntransient java.util.LinkedList$Node java.util.LinkedList.first\ntransient java.util.LinkedList$Node java.util.LinkedList.last\nprivate static final long java.util.LinkedList.serialVersionUID\npublic java.util.LinkedList()\npublic java.util.LinkedList(java.util.Collection)\npublic boolean java.util.LinkedList.add(java.lang.Object)\npublic void java.util.LinkedList.add(int,java.lang.Object)\npublic boolean java.util.LinkedList.remove(java.lang.Object)\npublic java.lang.Object java.util.LinkedList.remove()\npublic java.lang.Object java.util.LinkedList.remove(int)\npublic java.lang.Object java.util.LinkedList.get(int)\npublic java.lang.Object java.util.LinkedList.clone()\npublic int java.util.LinkedList.indexOf(java.lang.Object)\npublic void java.util.LinkedList.clear()\npublic int java.util.LinkedList.lastIndexOf(java.lang.Object)\npublic boolean java.util.LinkedList.contains(java.lang.Object)\npublic int java.util.LinkedList.size()\npublic java.lang.Object[] java.util.LinkedList.toArray(java.lang.Object[])\npublic java.lang.Object[] java.util.LinkedList.toArray()\npublic java.util.Spliterator java.util.LinkedList.spliterator()\npublic boolean java.util.LinkedList.addAll(int,java.util.Collection)\npublic boolean java.util.LinkedList.addAll(java.util.Collection)\npublic java.lang.Object java.util.LinkedList.getFirst()\npublic void java.util.LinkedList.push(java.lang.Object)\npublic java.lang.Object java.util.LinkedList.pop()\nprivate void java.util.LinkedList.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException\nprivate void java.util.LinkedList.writeObject(java.io.ObjectOutputStream) throws java.io.IOException\npublic java.lang.Object java.util.LinkedList.poll()\npublic java.lang.Object java.util.LinkedList.set(int,java.lang.Object)\npublic java.lang.Object java.util.LinkedList.peek()\npublic java.util.ListIterator java.util.LinkedList.listIterator(int)\nprivate java.lang.String java.util.LinkedList.outOfBoundsMsg(int)\npublic void java.util.LinkedList.addFirst(java.lang.Object)\npublic void java.util.LinkedList.addLast(java.lang.Object)\npublic boolean java.util.LinkedList.offerFirst(java.lang.Object)\npublic boolean java.util.LinkedList.offerLast(java.lang.Object)\npublic java.lang.Object java.util.LinkedList.removeFirst()\npublic java.lang.Object java.util.LinkedList.removeLast()\npublic java.lang.Object java.util.LinkedList.pollFirst()\npublic java.lang.Object java.util.LinkedList.pollLast()\npublic java.lang.Object java.util.LinkedList.getLast()\npublic java.lang.Object java.util.LinkedList.peekFirst()\npublic java.lang.Object java.util.LinkedList.peekLast()\npublic boolean java.util.LinkedList.removeFirstOccurrence(java.lang.Object)\npublic boolean java.util.LinkedList.removeLastOccurrence(java.lang.Object)\npublic boolean java.util.LinkedList.offer(java.lang.Object)\npublic java.lang.Object java.util.LinkedList.element()\npublic java.util.Iterator java.util.LinkedList.descendingIterator()\nprivate void java.util.LinkedList.linkFirst(java.lang.Object)\nvoid java.util.LinkedList.linkLast(java.lang.Object)\nvoid java.util.LinkedList.linkBefore(java.lang.Object,java.util.LinkedList$Node)\nprivate java.lang.Object java.util.LinkedList.unlinkFirst(java.util.LinkedList$Node)\nprivate java.lang.Object java.util.LinkedList.unlinkLast(java.util.LinkedList$Node)\njava.lang.Object java.util.LinkedList.unlink(java.util.LinkedList$Node)\nprivate boolean java.util.LinkedList.isElementIndex(int)\nprivate boolean java.util.LinkedList.isPositionIndex(int)\nprivate void java.util.LinkedList.checkElementIndex(int)\nprivate void java.util.LinkedList.checkPositionIndex(int)\njava.util.LinkedList$Node java.util.LinkedList.node(int)\nprivate java.util.LinkedList java.util.LinkedList.superClone()\n\nclass java.util.AbstractSequentialList\npublic void java.util.AbstractSequentialList.add(int,java.lang.Object)\npublic java.lang.Object java.util.AbstractSequentialList.remove(int)\npublic java.lang.Object java.util.AbstractSequentialList.get(int)\npublic java.util.Iterator java.util.AbstractSequentialList.iterator()\npublic boolean java.util.AbstractSequentialList.addAll(int,java.util.Collection)\npublic java.lang.Object java.util.AbstractSequentialList.set(int,java.lang.Object)\npublic abstract java.util.ListIterator java.util.AbstractSequentialList.listIterator(int)\n\nclass java.util.AbstractList\nprotected transient int java.util.AbstractList.modCount\npublic void java.util.AbstractList.add(int,java.lang.Object)\npublic boolean java.util.AbstractList.add(java.lang.Object)\npublic java.lang.Object java.util.AbstractList.remove(int)\npublic abstract java.lang.Object java.util.AbstractList.get(int)\npublic boolean java.util.AbstractList.equals(java.lang.Object)\npublic int java.util.AbstractList.hashCode()\npublic int java.util.AbstractList.indexOf(java.lang.Object)\npublic void java.util.AbstractList.clear()\npublic int java.util.AbstractList.lastIndexOf(java.lang.Object)\npublic java.util.List java.util.AbstractList.subList(int,int)\npublic java.util.Iterator java.util.AbstractList.iterator()\npublic boolean java.util.AbstractList.addAll(int,java.util.Collection)\npublic java.lang.Object java.util.AbstractList.set(int,java.lang.Object)\nprotected void java.util.AbstractList.removeRange(int,int)\npublic java.util.ListIterator java.util.AbstractList.listIterator(int)\npublic java.util.ListIterator java.util.AbstractList.listIterator()\nprivate void java.util.AbstractList.rangeCheckForAdd(int)\nprivate java.lang.String java.util.AbstractList.outOfBoundsMsg(int)\n\nclass java.util.AbstractCollection\nprivate static final int java.util.AbstractCollection.MAX_ARRAY_SIZE\npublic boolean java.util.AbstractCollection.add(java.lang.Object)\npublic boolean java.util.AbstractCollection.remove(java.lang.Object)\npublic java.lang.String java.util.AbstractCollection.toString()\npublic void java.util.AbstractCollection.clear()\npublic boolean java.util.AbstractCollection.isEmpty()\npublic boolean java.util.AbstractCollection.contains(java.lang.Object)\npublic abstract int java.util.AbstractCollection.size()\npublic java.lang.Object[] java.util.AbstractCollection.toArray(java.lang.Object[])\npublic java.lang.Object[] java.util.AbstractCollection.toArray()\npublic abstract java.util.Iterator java.util.AbstractCollection.iterator()\npublic boolean java.util.AbstractCollection.addAll(java.util.Collection)\nprivate static int java.util.AbstractCollection.hugeCapacity(int)\npublic boolean java.util.AbstractCollection.containsAll(java.util.Collection)\npublic boolean java.util.AbstractCollection.removeAll(java.util.Collection)\npublic boolean java.util.AbstractCollection.retainAll(java.util.Collection)\nprivate static java.lang.Object[] java.util.AbstractCollection.finishToArray(java.lang.Object[],java.util.Iterator)\n\nclass java.lang.Object\npublic java.lang.Object()\nprotected void java.lang.Object.finalize() throws java.lang.Throwable\npublic final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException\npublic final native void java.lang.Object.wait(long) throws java.lang.InterruptedException\npublic final void java.lang.Object.wait() throws java.lang.InterruptedException\npublic boolean java.lang.Object.equals(java.lang.Object)\npublic java.lang.String java.lang.Object.toString()\npublic native int java.lang.Object.hashCode()\npublic final native java.lang.Class java.lang.Object.getClass()\nprotected native java.lang.Object java.lang.Object.clone() throws java.lang.CloneNotSupportedException\nprivate static native void java.lang.Object.registerNatives()\npublic final native void java.lang.Object.notify()\npublic final native void java.lang.Object.notifyAll()\n\n";
        //When
        String actual = ListAllMembers.listAllMembers(list);
        //Then
        Assert.assertEquals(expected, actual);
    }
}
